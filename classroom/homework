-----------------------------------
dataframe
new_df = pd.DataFrame( {"Name": [name], "Position": [position], "Salary": [salary]})
df = pd.concat([df, new_df], ignore_index=True)
df.to_csv("employees_database.csv", index=False)

-----------------------------------
check no case sensitivity
user_exists = (user_df["Username"].str.lower() == username.lower()) & (user_df["Password"] == password)


filter link
https://youtu.be/BtiVbY7lhqw?si=nPp_UreLjeBln-un&t=236

img = Image.open(r'C:/Users/USER/Desktop/streamlipython/pythonstreamlit/media/Golfcart Robot.jpg')

r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'
-----------------------------------
------------------------------------------------------------------------------
projects:
login/register done
notebook done
school portal
https://preschool.dreamguystech.com/template/teacher-dashboard.html

loan app
https://www.youtube.com/watch?v=Gi1-jEqbKbw

send mail
enable 2fa
app password: create password
githubtee@gmail.com
cczaelfrzzyywngz

bibleapp done
timezone
recipe

project
2 sidebar options: Save Now, View Savings

Save Now
-New week Date - To choose new start date of the week st.date_input(‘Enter the first date”)
-Monday savings- Enter monday savings (use 2 columns for 2 days)
Continue all the way to sunday
Use a submit button to save into csv file

CSV file
Days | Amount | Total Saved 


View Savings (database )
This shows everything in the CSV file


Test:
Create a simple python program that
-create a menu for student details and students database
-Ask for student name on the left column and their age on the right column
-create a submit button
- save this in a csv file
show the dataframe in database page 


write a python program for students age 
Ask them for their name
ask them for their age
If they are between 0-4 they should be in Reception class
If they are between 5-11 they should be in elementary school
if they are between 12-19 they should be in college

write a python program for students age 
Ask them for their name
ask them for their age
If they are younger than 12 should be in elementary school
if they are older than 11 they should be in college

------------------------------------------------------------------

Things to do:
-toggle autosave on
-disable parameter in settings
-clean output in code runner settings (disable exe message)



#co-teacher Jeida will teach us the following:
# set the page to be full width
# the dataframe on full width
# add total, avearge and grade to also appear on CSV file
# collect students data, save as dictionary and convert to a dataframe
# overwrite the CSV file and display it
#In the end of the class, student should be able to add the name and the scores and it all appears in the CSV file

------------------------------------------------------------------


Test:
test1 
create a dictionary with 5 attributes and display it on streamlit

test2
convert the dictionary into a dataframe and display it on streamlit
------------------------


Savings App
Create a python program for daily savings for a user, 
add up all his savings from sunday to saturday

1 chicken sot 5 dollars
create a chicken app to ask users how many chicken they want to get
show them the total amount

A barber app to show service categories and fee

A fashion app 
-title
-image
-categories
Men's Fashion

Women's Fashion

Children's Fashion

(each category must havedifferent types of unique items and the prices like shirts(long sleeves,short, round neck, polo etc), boxers, trousers, shoes, bags etc)



-Add a restaurant picture
-Create a restaurant app that welcomes users and shows them the food selections
-If they choose/select their meals, show them the total amount
-Ask a question if you want to share the bill with others #use checkbox
-if yes, then ask how many people want to share the bill
-Then show the amount each person must contribute to pay the bill

homework: find a csv file on google and read it using pandas, and display it with streamlit


#  Create a student scores database which can 
#  -get the name of the student
#  -get 4 subjects score
#  -calculate the average of the subjects
#  -calculate the grade (A,B,C,D,E,F) using the average
#  -update your csv file


Create an employee database, that shows 
the name of employee, date of employment (use st.date), salary, 
gender, position/role, education level, contract status (full/part)
-------------
Test 1
Employee database (40 marks):
-Create a new menu page for 'employee file'
in the page place a search text on the 3rd column

Also Test 2 (60 marks):
open a txt file named employee and write a complete algorithm for the employee database you have coded 

IMPORTING MODULES:
streamlit: this will be used to design the software page
pandas


MENU:
This will be sued to navigate between ------

Pages:
registration page: use
employees database
employee file: use


Regisrtaion page
explain key functionalities
Here i will create functionalities to get each employee data (name, etc)

CSV file??
reading, viewing 

submit button:
explain what this does and how it links to the database page


---------------
Create a simple furniture store that has categories of 
home, office and school furnitures to get

-Create a dinner app that welcomes users and shows them the food selections
-Add a restaurant picture
-If they choose/select their meals, show them the total amount
-Ask a question if you want to share the bill with others
-if yes, then ask how many people want to share the bill
-Then show the amount each person must contribute to pay the bill

 create menu
 create form
 create df
 create numbers as strings
 retain leading zeros in numbers
 create unique ids to search or phone numbers if patient dont remember ID




'''
# Define a conditional color mapping
color = {
    'Gender': {
        'Male': 'Blue',
        'Female': 'Red',
        'Other': 'Green'  # You can add more categories and colors as needed
    },
    'ParentMaritalStatus': {
        'Married': 'Purple',
        'Single': 'Yellow',
        'Divorced': 'Orange'  # Add colors for different marital status values
    }
}

# Create a bar chart with custom colors based on the selected category
fig = px.bar(df, x=selectedX, y=selectedY, orientation='v', color=selectedX, color_discrete_map=color[selectedX])
'''

Test:
Create a simple python program that
-create a menu for student details and students database
-Ask for student name on the left column and their age on the right column
-create a submit button
- save this in a csv file
show the dataframe in database page 
